# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.46.0"

default_platform :android

platform :android do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."

    #ensure_git_status_clean
  end

  desc “Submit a new Degub Build to Applivery”
  lane :deploy_debug do |options|
    gradle(task: "clean")
    gradle(task: "test")
    gradle(
      task: "assemble",
      build_type: "Debug"
    )

    changelog = changelog_from_git_commits

    version = getVersion()
    puts "Version: #{version}"

    if !git_tag_exists(tag: "v#{version}")
        add_git_tag(
            tag: "v#{version}"
        )
        push_git_tags
     end

    applivery(
      app_id: "59541a5d22ea18594cb88fe6",                           # Your Applivery App Id
      api_key: "cf1e400255db7adf254f9428c7622a9d5b638f21",          # Your Applivery API Key
      notes: "#{changelog}",                                        # OPTIONAL: A human-readable release notes
      tags: "debug",                                                # OPTIONAL: Your build tags
      name: "v#{version}"                                           # OPTIONAL: A human-readable name for your build
    )

  end

  desc “Submit a new Release Build to Google Play”
  lane :deploy_release do |options|
    gradle(task: "clean")
    gradle(
      task: "assemble",
      build_type: "Release"
    )

    supply(
        track: 'beta'
      )

      gradle(task: "doBuildNumberIncrement")

  end

  desc "Changue version of application - use version:[major|minor|fixed] for versioning"
  lane :incrementVersion do |options|

    if(options[:version]=='minor')
      gradle(task: "doMinorVersionIncrement")
    elsif (options[:version]=='major')
      gradle(task: "doMajorVersionIncrement")
    else
      gradle(task: "doFixedVersionIncrement")
    end

   end

   private_lane :getVersion do
    file = File.new("../version.properties", "r")
      while (line = file.gets)
        if line.include? "major"
          versionComponents = line.strip.split('=')
          major = versionComponents[versionComponents.length - 1].tr("\"","")
        end
        if line.include? "minor"
          versionComponents = line.strip.split('=')
          minor = versionComponents[versionComponents.length - 1].tr("\"","")
        end
        if line.include? "fixed"
          versionComponents = line.strip.split('=')
          fixed = versionComponents[versionComponents.length - 1].tr("\"","")
        end
      end
    file.close

    puts "#{major}.#{minor}.#{fixed}"
    value = "#{major}.#{minor}.#{fixed}"
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )

  #hipchat(
  # api_token: "OSHmzaYK788Sqy2fX72310jvu1BclVzenFf1IP6G",
  #  version: "2",
  #  channel: "FastLane%20Testing",
  #  message: "Successfully deployed new App Update."
  #)

    notification(title: "Fastlane", message: "Fastlane finished '#{lane}' successfully") # Mac OS X Notification
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )

  hipchat(
    api_token: "OSHmzaYK788Sqy2fX72310jvu1BclVzenFf1IP6G",
    version: "2",
    channel: "FastLane%20Testing",
    message: exception.message
  )
  end
end

# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded.
# Learn more at https://github.com/fastlane/fastlane#metrics
